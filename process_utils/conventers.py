import requests
import selenium
from selenium.webdriver import Chrome
from selenium.webdriver.chrome.options import Options
from pathlib import Path
import time
import os
import base64
import json

headless = False
chromedriver_path = "chromedriver.exe"


# chromedriver_path = "process_utils/chromedriver.exe"


# def photo_to_anime(image_url):
#     headers = {"accept": "image/png",
#                "X-OVH-Api-Key": "506259df-e947-488f-b817-1f35793cd6e9",
#                "Content-Type": "application/json"}
#     data = f'{{"url":"{image_url}"}}'
#     a = requests.post("https://api-market-place.ai.ovh.net/image-selfie2anime/process", headers=headers, data=data).content
#     return a
#     # with open(file_name, 'wb') as fd:
#     #     fd.write(a)

def photo_to_comics(photo_array):
    file_name = photo_array[0]
    file = open(file_name, "rb")
    files = {'image': file}
    r = requests.post("https://face.bubble.ru/_api/face", files=files)
    file.close()
    return r.content


def photo_to_portrait(photo_array):
    chrome_options = Options()
    if headless:
        chrome_options.add_argument("--headless")
        chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument(f"window-size=500,500")
    browser = Chrome(chromedriver_path, options=chrome_options)
    browser.get("https://ai-art.tokyo/en/")
    file_name_temp = photo_array[0]
    time.sleep(2)
    try:
        a = browser.find_element_by_tag_name("input")
    except:
        time.sleep(3)
        browser.get("https://ai-art.tokyo/en/")
        a = browser.find_element_by_tag_name("input")
    len_check_error = len(browser.find_elements_by_class_name("uk-modal-page"))
    # a.send_keys(f"{os.getcwd()}\\{file_name_temp}")
    a.send_keys(f"{file_name_temp}")
    time.sleep(5)
    result_element = None
    while not result_element:
        try:
            result_element = browser.find_element_by_class_name("preview-image__image")
        except selenium.common.exceptions.NoSuchElementException:
            time.sleep(1)
        if len_check_error != len(browser.find_elements_by_class_name("uk-modal-page")):
            browser.close()
            raise Exception("На фото не обнаружено лиц :(")
    img_data = result_element.get_attribute("src").split(",")[1]
    img_data = str.encode(img_data)
    return base64.decodebytes(img_data)
    # with open(file_name, "wb") as fh:
    #     fh.write(base64.decodebytes(img_data))


# with open("C:\\Users\\Programming\\PycharmProjects\\foton_yandex\\static\\user_photos\\download.jpg", 'rb') as binary_file:
#     binary_file_data = binary_file.read()
#     base64_encoded_data = base64.b64encode(binary_file_data)
#     base64_message = base64.b64encode(binary_file_data.decode("utf-8"))
#
# print(base64_message.decode("ascii") )
# text = ""
# base64_img_bytes = text.encode('utf-8')
# with open('decoded_image.png', 'wb') as file_to_save:
#     decoded_image_data = base64.decodebytes(base64_img_bytes)
#     file_to_save.write(decoded_image_data)
# print(base64_message == base64_img_bytes)

print(photo_to_portrait(["C:\\Users\\Programming\\PycharmProjects\\foton_yandex\\static\\user_photos\\download.jpg"]))
conventers = [photo_to_portrait, photo_to_comics]
